
services:
  traefik:
    image: traefik:v3.3.4
    container_name: traefik-proxy
    ports:
      # Internet HTTP/S routing entrypoints.
      # I've moved these into far ports are the home router can handle port mapping.
      # For external / internet connections.
      - "20080:20080"
      - "20443:20443"
      # Local HTTP/S routing entrypoints.
      # It's dangerous to use the exposed ports to access local services.
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Traefik listens on the docker socket to register containers.
      - ./config/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./config/traefik/traefik_dynamic_conf.yml:/etc/traefik/traefik_dynamic_conf.yml:ro
      - ./config/certs:/var/traefik/certs/:rw # Traefik will autogenerate a TLS cert into here.
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD_HASH}
       # Traefik Dashboard + API over local HTTP and passworded.
      - traefik.http.routers.dashboard.rule=Host(`traefik.home`)&&(PathPrefix(`/api`)||PathPrefix(`/dashboard`))
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.entrypoints=local-http-entry
      - traefik.http.routers.traefik-dashboard.middlewares=traefik-auth
      # Traefik Dashboard + API over local HTTPS and passworded.
      - traefik.http.routers.traefik-dashboard.tls=true
      - traefik.http.routers.traefik-dashboard.entrypoints=local-https-entry
      - traefik.http.routers.traefik-dashboard.rule=Host(`traefik.home`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik-dashboard.service=api@internal
      - traefik.http.routers.traefik-dashboard.middlewares=traefik-auth
    restart: unless-stopped

  dns-sync:
    build:
      context: ./containers/route53_dns_sync
      dockerfile: Dockerfile
    container_name: route53-dns-sync
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_HOSTED_ZONE_ID=${AWS_HOSTED_ZONE_ID}
      - DOMAIN_NAME=raspi.alanas-j.site.
    restart: unless-stopped

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      # DNS Ports
      - "53:53/tcp"
      - "53:53/udp"
      # Pihole hosts a site for managing it.
      # Leaving the following ports exposed if direct/ not via Traefik access is ever needed.
      - "8081:80/tcp"
      - "4443:443/tcp"
    environment:
      TZ: 'Europe/Dublin'
      FTLCONF_webserver_api_password: ${PIHOLE_PASSWORD}
      FTLCONF_dns_listeningMode: 'all' # If using Docker's default `bridge` network setting the dns listening mode should be set to 'all'
    volumes:
      # For persisting Pi-hole's databases and common configuration file
      - './data/etc-pihole:/etc/pihole'
    labels:
      - traefik.enable=true
      # Local HTTP
      - traefik.http.routers.local-pihole-http-router.entrypoints=local-http-entry
      - traefik.http.routers.local-pihole-http-router.rule=Host(`pihole.home`)
      - traefik.http.routers.local-pihole-http-router.service=pihole-http
      - traefik.http.services.pihole-http.loadbalancer.server.port=80
      # Local HTTPS (passthrough needs to use a tcp router + this is defined in yml config.)
      - traefik.tcp.services.pihole-https.loadbalancer.server.port=443
    restart: unless-stopped

  node-app:
    build:
      context: https://Alanas-J:${GITHUB_TOKEN}@github.com/Alanas-J/personal-homepage-node-server.git#main
      dockerfile: Dockerfile
    container_name: node-app
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.prefix-stripper.stripprefix.prefixes=/node
      # Local HTTP
      - traefik.http.routers.local-node-http-router.entrypoints=local-http-entry
      - traefik.http.routers.local-node-http-router.rule=PathPrefix(`/node`)
      - traefik.http.routers.local-node-http-router.middlewares=prefix-stripper
      # Local HTTPS
      - traefik.http.routers.local-node-https-router.tls=true
      - traefik.http.routers.local-node-https-router.entrypoints=local-https-entry
      - traefik.http.routers.local-node-https-router.rule=PathPrefix(`/node`)
      - traefik.http.routers.local-node-https-router.middlewares=prefix-stripper
      # Internet HTTP
      - traefik.http.routers.internet-node-http-router.entrypoints=internet-http-entry
      - traefik.http.routers.internet-node-http-router.rule=PathPrefix(`/node`)
      - traefik.http.routers.internet-node-http-router.middlewares=prefix-stripper
      # Internet HTTPS
      - traefik.http.routers.internet-node-https-router.tls=true
      - traefik.http.routers.internet-node-https-router.tls.certresolver=raspiresolver
      - traefik.http.routers.internet-node-https-router.entrypoints=internet-https-entry
      - traefik.http.routers.internet-node-https-router.rule=Host(`raspi.alanas-j.site`) && PathPrefix(`/node`)
      - traefik.http.routers.internet-node-https-router.middlewares=prefix-stripper
    restart: unless-stopped
